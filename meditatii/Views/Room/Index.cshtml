@{
    Layout = "";
    ViewBag.Title = "Profesori";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InMeditatii - @ViewBag.Title</title>
    <!-- Angular2 Code -->
    <base href="/">

    <!-- Polyfill(s) for older browsers -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en"></script>
    <script src="node_modules/core-js/client/shim.min.js"></script>
    <script src="node_modules/zone.js/dist/zone.js"></script>
    <script src="node_modules/reflect-metadata/Reflect.js"></script>
    <script src="node_modules/systemjs/dist/system.src.js"></script>
    <script src="systemjs.config.js"></script>
    <script>
        System.import('app/main.js').catch(function (err) { console.error(err); });
    </script>
    <!-- Angular2 Code -->

    <script src="https://static.opentok.com/v2/js/opentok.min.js"></script>
    <style>
        body, html {
            background-color:gray !important;
            height: 100%;
        }

        #videos {
            position: relative;
            width: 80%;
            height: 100%;
            float: left;
        }

        #subscriber {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
        }

        #publisher {
            position: absolute;
            width: 360px;
            height: 240px;
            bottom: 10px;
            left: 10px;
            z-index: 100;
            border: 3px solid white;
            border-radius: 3px;
        }

        #remainingtime {
            position: relative;
            width: 20%;
            float: right;
            right: 0;
            height: 22px;
            color: white;
            background-color: #000;
            text-align: center;
            vertical-align: middle;
            line-height: 22px;
            font-weight: bold;
        }
        #textchat {
            position: relative;
            width: 20%;
            float: right;
            right: 0;
            /* Firefox */
            height: -moz-calc(100% - 22px);
            /* WebKit */
            height: -webkit-calc(100% - 22px);
            /* Opera */
            height: -o-calc(100% - 22px);
            /* Standard */
            height: calc(100% - 18px);
            background-color: #333;
        }

        #history {
            width: 100%;
            height: calc(100% - 40px);
            overflow: auto;
        }

        input#msgTxt {
            height: 40px;
            position: absolute;
            bottom: 0;
            width: 100%;
        }

        #history .mine {
            color: #00FF00;
            text-align: right;
            margin-right: 10px;
        }

        #history .theirs {
            color: #00FFFF;
            margin-left: 10px;
        }

        #overlay {
            position: fixed; /* Sit on top of the page content */
            display: none; /* Hidden by default */
            width: 100%; /* Full width (cover the whole page) */
            height: 100%; /* Full height (cover the whole page) */
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5); /* Black background with opacity */
            z-index: 2; /* Specify a stack order in case you're using a different order for other elements */
            cursor: pointer; /* Add a pointer on hover */
        }

        #overlaytext {
            position: absolute;
            top: 50%;
            left: 50%;
            font-size: 50px;
            color: white;
            transform: translate(-50%,-50%);
            -ms-transform: translate(-50%,-50%);
        }

        #filter {
        position: absolute;
        bottom: 0;
        right: 0;
        z-index: 101;
        }        

        #audiocontrol {
            cursor: pointer;
            position: absolute;
            bottom: 20px;
            right: 50%;
            z-index: 101;
            width:40px;
            height: 40px;
            background-image: url(/img/audio-volume.svg);
        }
        #videocontrol {
            cursor: pointer;
            position: absolute;
            bottom: 20px;
            right: calc(50% + 50px);
            z-index: 101;
            width:40px;
            height: 40px;
            background-image: url(/img/video_no_icon.png);
        }   

        .novideo
        {
          background-image: url(/img/video_icon.png) !important;
        }     

        #endcall {
            cursor: pointer;
            position: absolute;
            bottom: 20px;
            right: calc(50% - 50px);
            z-index: 101;
            width:45px;
            height: 45px;
            background-image: url(/img/end-call-icon.jpg);
            background-size: contain;
        }
        
        .audiomuted{
            background-image: url(/img/audio-muted.svg) !important;
        }

      .settings{
            cursor: pointer;
            position: absolute;
            bottom: 20px;
            right: 0;
            z-index: 101;
            width:40px;
            height: 40px;
        }

        .settings:after {
          content: '\2807';
          font-size: 48px;
          color:white;

          }        
    </style>
</head>
<body>

    <div id="overlay">
        <div id="overlaytext">
            Timpul a expirat
        </div>
    </div>

    <meditatii-app>
        <room></room>
    </meditatii-app>
    <div id="videos">
        <div id="subscriber">
          <div id="videocontrol"></div>
          <div id="audiocontrol"></div>
          <div id="endcall" id="endcall"></div>
          <div title="Setari" class="settings" id="settingsButton"></div>
        </div>
        <div id="publisher">
        </div>
    </div>
    <div id="remainingtime">
        Timp ramas: 60 minute
    </div>
    <div id="textchat">
        <p id="history"></p>
        <form id="form">
            <input type="text" placeholder="Input your text here" id="msgTxt" />
        </form>
    </div>
<!-- The Modal -->
<div class="modal" id="dialogsetari">
  <div class="modal-dialog">
    <div class="modal-content">

      <!-- Modal Header -->
      <div class="modal-header">
        <h4 class="modal-title">Settings</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>

      <!-- Modal body -->
      <div class="modal-body">
        <label for="audio-source-select">Audio Source:</label><select id="audio-source-select"></select><br/>
        <div id="audio-meter"><label for="audio-meter">Audio Level:</label><meter min="0" max="1"></meter></div>
        <label for="video-source-select">Video Source:</label><select id="video-source-select"></select>
        <button id="cycle-video-btn" type="button">Cycle Video</button><br/>                
      </div>

      <!-- Modal footer -->
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-dismiss="modal">Inchide</button>
      </div>

    </div>
  </div>
</div>
<!-- The Modal -->
<div class="modal" id="endsession">
  <div class="modal-dialog">
    <div class="modal-content">

      <!-- Modal Header -->
      <div class="modal-header">
        <h4 class="modal-title">Sesiunea s-a terminat</h4>
      </div>

      <!-- Modal body -->
      <div class="modal-body">
        Multumim
      </div>

      <!-- Modal footer -->
      <div class="modal-footer">
        <button id="backtomeeting">Conecteaza-te inapoi la sesiune</button>
      </div>

    </div>
  </div>
</div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Styles.Render("~/css/css")
  
    <script>
 
        ///
        /* global OT */

(function closure() {

        /// replace these values with those generated in your TokBox Account
        var apiKey = "@ViewBag.apiKey";
        var sessionId = "@ViewBag.SessionId";
        var token = "@ViewBag.TokenId";

        var session;

        // Handling all of our errors here by alerting them
        function handleError(error) {
            if (error) {
                alert(error.message);
            }
        }

        @if (ViewBag.remainingTime >= 0)
        {
            <text>
                // (optional) add server code here
                initializeSession();
                var session;
                var publisher;

                function initializeSession() {
                    session = OT.initSession(apiKey, sessionId);

                    // Subscribe to a newly created stream
                    session.on('streamCreated', function (event) {
                          session.subscribe(event.stream, 'subscriber', {
                            insertMode: 'append',
                            width: '100%',
                            height: '100%'
                          }, handleError);
                    });

                    // Create a publisher
                    publisher = OT.initPublisher('publisher', {
                          insertMode: 'append',
                          width: '100%',
                          height: '100%',
                          showControls: true,
                          name: '@ViewBag.Name',
                          style: {buttonDisplayMode: 'off'}
                        }, (err) => {
                            if (err) {
                              alert('Publish error ' + err.message);
                            } else {
                              setupDeviceSwitching();
                              setupAudioLevelMeter();
                            }
                        });

                    // Connect to the session
                    session.connect(token, function (error) {
                        // If the connection is successful, initialize a publisher and publish to the session
                        if (error) {
                            handleError(error);
                        } else {
                            session.publish(publisher, handleError);
                        }
                    });

                    // Receive a message and append it to the history
                    var msgHistory = document.querySelector('#history');

                    session.on('signal:msg', function signalCallback(event) {
                        var msg = document.createElement('p');
                        msg.textContent = event.data;
                        msg.className = event.from.connectionId === session.connection.connectionId ? 'mine' : 'theirs';
                        msgHistory.appendChild(msg);
                        msg.scrollIntoView();
                        SaveChat(msg.textContent);
                    });
                }
        </text>
        }
        else
        {
          <text>
            document.getElementById("backtomeeting").style.display = "none";
            
            changeStatus(false);
          </text>
        }

        function SaveChat(msg) {
            var appoitmentId = @ViewBag.AppoitmentId;

            $.post('/api/appoitments/saveappoitmentchat', { AppoitmentId: appoitmentId, Message: msg }, function (response) {
                data = response;
            }).fail(function () {
                console.log("error");
            });
        }

        function backToMetting()
        {
          
        }

        function updateRemainingTime() {
            var appoitmentId = @ViewBag.AppoitmentId;

            $.get("api/appoitments/GetRemaningTimeForAppoitment/" + appoitmentId, function (remainingMinutes, status) {

                console.log("remaining time:" + remainingMinutes);

                var remainingtimeDiv = document.querySelector('#remainingtime');
                remainingtimeDiv.innerHTML = "Timp ramas: " + remainingMinutes + " minute";

                if (remainingMinutes < 5)
                {
                  remainingtimeDiv.style.color = "red";
                }

                if (remainingMinutes < 0) 
                {
                  remainingtimeDiv.innerHTML = "Timpul a expirat!";
                }
                else
                {
                  remainingtimeDiv.innerHTML = "Timp ramas: " + remainingMinutes + " minute";
                }

                //check if time expired
                if (remainingMinutes <= -1) {
                    document.getElementById("overlay").style.display = "block"; //show overlay

                    document.getElementById("backtomeeting").style.display = "none";
                    changeStatus(false);
                }

            });
        }

        updateRemainingTime();
        setInterval(updateRemainingTime, 60 * 1000);

        // Text chat
        var form = document.querySelector('form');
        var msgTxt = document.querySelector('#msgTxt');

        // Send a signal once the user enters data in the form
        form.addEventListener('submit', function submit(event) {
            event.preventDefault();

            session.signal({
                type: 'msg',
                data: msgTxt.value
            }, function signalCallback(error) {
                if (error) {
                    console.error('Error sending signal:', error.name, error.message);
                } else {
                    msgTxt.value = '';
                }
            });
        });

    var isAudio = true;
    var isVideo = true;
        
  $('#settingsButton').click(function(){$('#dialogsetari').modal('show');});

  
  $('#videocontrol').click(function(){
        const videoSelector = document.querySelector('#video-source-select');
        if (!isVideo)
        {
          //is muted 
          
          this.classList.remove("novideo");
          videoSelector.disabled = false;
        }
        else
        {
          //is active - mute
          this.classList.add("novideo");
          videoSelector.disabled = true;
        }
        isVideo = !isVideo;
        publisher.publishVideo(isVideo);
    });

  $('#audiocontrol').click(function(){
        const audioSelector = document.querySelector('#audio-source-select');
        if (!isAudio)
        {
          //is muted 
          
          this.classList.remove("audiomuted");
          audioSelector.disabled = false;
        }
        else
        {
          //is active - mute
          this.classList.add("audiomuted");
          audioSelector.disabled = true;
        }
        isAudio = !isAudio;
        publisher.publishAudio(isAudio);
    });

  $('#endcall').click(function(){
    session.unpublish(publisher);
    session.disconnect();    

    changeStatus(false);
    
  });

  $('#backtomeeting').click(function(){
    initializeSession();
    changeStatus(true);
    
  });

  function changeStatus(isSessionActiv)
  {
    if (isSessionActiv)
    {
      //hide all
      $('#videos').show();
      $('#remainingtime').show();
      $('#textchat').show();

      //show final message
      $('#endsession').modal('toggle');

    }
    else
    {
      //hide all
      $('#videos').hide();
      $('#remainingtime').hide();
      $('#textchat').hide();

      //show final message
      $('#endsession').modal('show');
    }

  }

  const audioSelector = document.querySelector('#audio-source-select');
  const videoSelector = document.querySelector('#video-source-select');
  const publishBtn = document.querySelector('#publish-btn');
  const cycleVideoBtn = document.querySelector('#cycle-video-btn');
  //let publisher;

  // Get the list of devices and populate the drop down lists
  function populateDeviceSources(selector, kind) {
    OT.getDevices((err, devices) => {
      if (err) {
        alert('getDevices error ' + err.message);
        return;
      }
      let index = 0;
      selector.innerHTML = devices.reduce((innerHTML, device) => {
        if (device.kind === kind) {
          index += 1;
          return `${innerHTML}<option value="${device.deviceId}">${device.label || device.kind + index}</option>`;
        }
        return innerHTML;
      }, '');
    });
  }

  // We request access to Microphones and Cameras so we can get the labels
  OT.getUserMedia().then(() => {
    populateDeviceSources(audioSelector, 'audioInput');
    populateDeviceSources(videoSelector, 'videoInput');
  });

  // Start publishing when you click the publish button
/*  publishBtn.addEventListener('click', () => {
    // Disable the audio and video pickers and hide the publish button
    audioSelector.disabled = true;
    videoSelector.disabled = true;
    publishBtn.style.display = 'none';

    // Start publishing with the selected devices
    publisher = OT.initPublisher('publisher', {
      audioSource: audioSelector.value,
      videoSource: videoSelector.value
    }, (err) => {
      if (err) {
        alert('Publish error ' + err.message);
      } else {
        setupDeviceSwitching();
        setupAudioLevelMeter();
      }
    });
  });*/

  // Allow you to switch to different cameras and microphones using
  // setAudioSource and cycleVideo
  function setupDeviceSwitching() {
    audioSelector.disabled = false;

    // When the audio selector changes we update the audio source
    audioSelector.addEventListener('change', () => {
      audioSelector.disabled = true;
      publisher.setAudioSource(event.target.value).then(() => {
        audioSelector.disabled = false;
      }).catch((err) => {
        alert(`setAudioSource failed: ${err.message}`);
        audioSelector.disabled = false;
      });
    });

    // When the cycleVideo button is clicked we call cycleVideo
    cycleVideoBtn.addEventListener('click', () => {
      cycleVideoBtn.disabled = true;
      publisher.cycleVideo().then(({ deviceId }) => {
        videoSelector.value = deviceId;
        cycleVideoBtn.disabled = false;
      }).catch((err) => {
        alert('cycleVideo error ' + err.message);
        cycleVideoBtn.disabled = false;
      });
    });
    cycleVideoBtn.style.display = 'inline-block';
  }

  function setupAudioLevelMeter() {
    const audioLevel = document.querySelector('#audio-meter');
    const meter = document.querySelector('#audio-meter meter');
    audioLevel.style.display = 'block';
    let movingAvg = null;
    publisher.on('audioLevelUpdated', (event) => {
      if (movingAvg === null || movingAvg <= event.audioLevel) {
        movingAvg = event.audioLevel;
      } else {
        movingAvg = 0.7 * movingAvg + 0.3 * event.audioLevel;
      }

      // 1.5 scaling to map the -30 - 0 dBm range to [0,1]
      var logLevel = (Math.log(movingAvg) / Math.LN10) / 1.5 + 1;
      logLevel = Math.min(Math.max(logLevel, 0), 1);
      meter.value = logLevel;
    });
  }


})();

    </script>
</body>
</html>
